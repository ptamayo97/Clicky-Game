{"version":3,"sources":["components/Wrapper.js","components/Header.js","components/Container.js","components/Row.js","components/Navbar.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Header","Container","Row","Navbar","id","score","topScore","Card","key","name","onClick","click","src","image","alt","App","state","characters","clickedCharacters","message","_this","setState","console","log","event","currentCharacter","target","indexOf","sort","Math","random","alert","b","concat","clickedcharacters","charactershuffle","_this2","this","components_Wrapper","components_Navbar","components_Header","components_Container","components_Row","map","character","components_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f47bd85.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Wrapper = props => {\r\n  return <div className=\"App \">{props.children}</div>;\r\n};\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header \">\r\n      <h1 className=\"flow-text\">\r\n        <strong>Clicky Game!</strong>\r\n      </h1>\r\n      <h3 className=\"flow-text\">\r\n        Click on an image to earn points, but don't click on any more than once!\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Container = props => {\r\n  return <div className=\"container\">{props.children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\n\r\nconst Row = props => {\r\n  return <div className=\"row cards-section\">{props.children}</div>;\r\n};\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\n\r\nconst Navbar = props => {\r\n  return (\r\n    <div id=\"nav\" className=\"red z-depth-2 white-text\">\r\n      <div>\r\n        <strong>Clicky Game!</strong>\r\n      </div>\r\n      <div>Click an image to begin!</div>\r\n      <div>\r\n        Score: {props.score} | Top Score: {props.topScore}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className=\"col s12 m3 card-wrapper \">\r\n      <div\r\n        className=\"card card-container hvr-grow\"\r\n        key={props.id}\r\n        name={props.name}\r\n        onClick={props.click}\r\n      >\r\n        <div className=\"card-image card-child \">\r\n          <img src={props.image} alt={props.alt} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Header from \"./components/Header\";\r\nimport Container from \"./components/Container\";\r\nimport Row from \"./components/Row\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Card from \"./components/Card\";\r\nimport characters from \"./characters.json\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    characters,\r\n    clickedCharacters: [],\r\n    score: 0,\r\n    topScore: 0,\r\n    message: [\"You guessed Correctly!\", \"Game Over!\"]\r\n  };\r\n\r\n  topScore = () => {\r\n    if (this.state.score > this.state.topScore) {\r\n      this.setState({ topScore: this.state.score });\r\n      console.log(this.state.topScore);\r\n    }\r\n  };\r\n\r\n  click = event => {\r\n    const currentCharacter = event.target.alt;\r\n    console.log(currentCharacter);\r\n    const characterClicked =\r\n      this.state.clickedCharacters.indexOf(currentCharacter) > -1;\r\n    if (characterClicked) {\r\n      this.setState({\r\n        characters: this.state.characters.sort(() => 0.5 - Math.random()),\r\n        clickedCharacters: [],\r\n        score: 0\r\n      });\r\n      alert(\"You lose\");\r\n      this.topScore();\r\n    } else {\r\n      this.setState(\r\n        {\r\n          characters: this.state.characters.sort(function(a, b) {\r\n            return 0.5 - Math.random();\r\n          }),\r\n          clickedCharacters: this.state.clickedCharacters.concat(\r\n            currentCharacter\r\n          ),\r\n          score: this.state.score + 1\r\n        },\r\n        () => {\r\n          if (this.state.score === 12) {\r\n            alert(\"You Win!\");\r\n            this.topScore();\r\n            this.setState({\r\n              characters: this.state.characters.sort(() => 0.5 - Math.random()),\r\n              clickedcharacters: [],\r\n              score: 0\r\n            });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  charactershuffle = () => {\r\n    this.state.characters.sort(() => 0.5 - Math.random());\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\r\n        <Header />\r\n        <Container>\r\n          <Row>\r\n            {this.state.characters.map(character => (\r\n              <Card\r\n                key={character.id}\r\n                name={character.name}\r\n                image={character.image}\r\n                alt={character.name}\r\n                click={this.click}\r\n              />\r\n            ))}\r\n          </Row>\r\n        </Container>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}